// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model User {
  id       String    @id @default(uuid())
  email    String    @unique
  username String    @unique
  password String
  Content  Content[]
  payment  Payment[]
  accounts Account[]
  sessions Session[]
}

model Content {
  id        String @id @default(uuid())
  topic     String
  prompt    String
  template  String
  response  String
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Payment {
  id        String @id @default(uuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  subId     String
  status    Boolean
  paymentId String
  createdAt DateTime @default(now())
}
